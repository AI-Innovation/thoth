import { config } from 'dotenv'
config({
  path: './.env',
})
import react from '@vitejs/plugin-react'
import dfxJson from "./dfx.json"
import * as fs from 'fs'
import { defineConfig } from 'vite'
import PkgConfig from 'vite-plugin-package-config'
import * as path from 'path'
import inject from '@rollup/plugin-inject'
import analyze from 'rollup-plugin-analyzer'

const isDev = process.env["DFX_NETWORK"] !== "ic"
const isAnalyze = typeof process.env.BUNDLE_ANALYZE !== 'undefined'

type Network = "ic" | "local"

interface CanisterIds {
  [key: string]: { [key in Network]: string }
}

let canisterIds: CanisterIds
try {
  canisterIds = JSON.parse(
    fs
      .readFileSync(
        isDev ? ".dfx/local/canister_ids.json" : "./canister_ids.json",
      )
      .toString(),
  )
} catch (e) {
  console.error("\n⚠️  Before starting the dev server run: dfx deploy\n\n")
}

// List of all aliases for canisters
// This will allow us to: import { canisterName } from "canisters/canisterName"
const aliases = Object.entries(dfxJson.canisters).reduce(
  (acc, [name, _value]) => {
    // Get the network name, or `local` by default.
    const networkName = process.env["DFX_NETWORK"] || "local"
    const outputRoot = path.join(
      __dirname,
      ".dfx",
      networkName,
      "canisters",
      name,
    )

    return {
      ...acc,
      ["canisters/" + name]: path.join(outputRoot, "index" + ".js"),
    }
  },
  {},
)

// Generate canister ids, required by the generated canister code in .dfx/local/canisters/*
// This strange way of JSON.stringifying the value is required by vite
const canisterDefinitions = Object.entries(canisterIds).reduce(
  (acc, [key, val]) => ({
    ...acc,
    [`process.env.${key.toUpperCase()}_CANISTER_ID`]: isDev
      ? JSON.stringify(val.local)
      : JSON.stringify(val.ic),
  }),
  {},
)

// Gets the port dfx is running on from dfx.json
const DFX_PORT = dfxJson.networks.local.bind.split(":")[1]

// https://vitejs.dev/config/
export default defineConfig(async command => {
  const returned = {} as any

  returned.plugins = [PkgConfig(), react()]
  returned.server = {
    hmr: false,
    host: true,
    port: process.env.PORT || 3003,
    https: {
      key: fs.readFileSync('./certs/key.pem'),
      cert: fs.readFileSync('./certs/cert.pem'),
      maxSessionMemory: 100,
    },
    fs: {
      allow: ["."],
    },
    proxy: {
      // This proxies all http requests made to /api to our running dfx instance
      "/api": {
        target: `http://localhost:${DFX_PORT}`,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, "/api"),
      },
    },
  }
  returned.resolve = {
    alias: {
      handlebars: 'handlebars/dist/handlebars.min.js',
      '@': path.resolve(__dirname, 'src'),
      '@thoth': path.resolve(__dirname, 'src/screens/Thoth'),
      '@components': path.resolve(__dirname, 'src/components'),
      ...aliases
    },
  }
  returned.build = {
    target: 'esnext',
    sourcemap: 'inline',
    minify: 'esbuild',
    dynamicImportVarsOptions: {
      warnOnError: true,
    },
    rollupOptions: {
      plugins: [],
      external: ['dotenv-flow'],
      output: {
        dir: 'dist',
        format: 'es',
      },
    }
  }

  returned.define = {
    // Here we can define global constants
    // This is required for now because the code generated by dfx relies on process.env being set
    ...canisterDefinitions,
    "process.env.NODE_ENV": JSON.stringify(
      isDev ? "development" : "production",
    ),
  }

  if (isAnalyze) {
    returned.build.rollupOptions.plugins.push(analyze())
  }

  if (command.command === 'build' && process.env.VITE_LOCAL_BUILD !== 'true') {
    returned.build.rollupOptions.plugins = [
      inject({
        process: 'process',
      }),
    ]
  }

  if (command.command !== 'build' || process.env.VITE_LOCAL_BUILD === 'true') {
    returned.define = {
      'process.env': process.env,
      'process.browser': (process as any).browser,
    }
  }
  return returned
})